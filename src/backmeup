#!/bin/zsh
# backmeup
# author: Jonathan Donald
# License: GPL
#
# backup script
# a convenience wrapper around the dar command
#
# dependencies
#     awk
#     cut
#     dar
#     df
#     du
#     echo
#     grep
#     mkdir
#     realpath
#     tail
#     uname
#     zsh
#
#-------------------------------------------------------------------------------------------------------

# makes an incremental (aka differential) backup
#    parameter 1: the backup destination directory
#    parameter 2: the name (hostname) of the machine being backed up
#    parameter 3: the current date/time stamp
function incr_backup() {
    PARENT_BACKUP_DIR=${1}
    MACHINE=${2}
    DATESTAMP=${3}
    BACKUP_DIR=${PARENT_BACKUP_DIR}/${DATESTAMP}-DIFF

    if [ ! -d ${BACKUP_DIR} ]
    then
	mkdir -p ${BACKUP_DIR}
    else
	/bin/echo "backup directory ${BACKUP_DIR} already exists"
    fi

    /bin/echo "making a differential backup to ${BACKUP_DIR}/"
    BACKUP_ARCHIVE="${BACKUP_DIR}/${MACHINE}-${DATESTAMP}-DIFF"
    PREV_ARCH_DIR=`/bin/ls -1t ${PARENT_BACKUP_DIR} | /bin/grep FULL | /usr/bin/tail -n 1`
    PREV_ARCH_FILE=`/bin/ls -1tr ${PARENT_BACKUP_DIR}/${PREV_ARCH_DIR} | /usr/bin/tail -n 1`
    # derive the previous backup set from the previous archive file name
    LEN=`/bin/echo ${PREV_ARCH_FILE} | wc -c`
    let MACHINE_LEN=`echo $MACHINE | wc -c`
    let "TRUNC_LEN=${LEN}-${MACHINE_LEN}+1"
    PREV_ARCH_BASE=`/bin/echo ${PREV_ARCH_FILE} | cut -c 1-${TRUNC_LEN}`

    dar -v \
	-s ${MAX_SIZE} \
	-P tmp \
	-c ${BACKUP_ARCHIVE} \
	-A ${PARENT_BACKUP_DIR}/${PREV_ARCH_DIR}/${PREV_ARCH_BASE} -R /  \
        -B ${CFG_FILE}
    donetime=`date`
    /bin/echo "Differential backup ${BACKUP_ARCHIVE} completed at ${donetime}"
    /bin/echo "backed up to `/usr/bin/du -sh ${BACKUP_DIR}`"
}

# make a full backup
#    parameter 1: the backup destination directory
#    parameter 2: the name (hostname) of the machine being backed up
#    parameter 3: the current date/time stamp
function full_backup() {
    BACKUP_DIR=${1}
    MACHINE=${2}
    DATESTAMP=${3}
    BACKUP_DIR=${PARENT_BACKUP_DIR}/${DATESTAMP}-FULL

    if [ ! -d ${BACKUP_DIR} ]
    then
	mkdir -p ${BACKUP_DIR}
    else
	/bin/echo "backup directory ${BACKUP_DIR} already exists"
    fi

    /bin/echo "making a full backup to ${BACKUP_DIR}/"
    BACKUP_ARCHIVE="${BACKUP_DIR}/${MACHINE}-${DATESTAMP}-FULL"
    dar -v \
	-s ${MAX_SIZE} \
	-c ${BACKUP_ARCHIVE} \
	-R / \
        -B ${CFG_FILE}
    donetime=`date`
    /bin/echo "Full backup ${BACKUP_ARCHIVE} completed at ${donetime}"
    /bin/echo "backed up to `/usr/bin/du -sh ${BACKUP_DIR}`"
}

# determine the mount point of a directory or file
#    parameter 1: the directory or file path
function get_mount_point() {
    DIR=${1}
    FULL_PATH=`/usr/bin/realpath ${DIR}`
    DRIVE=`/bin/df ${FULL_PATH} | awk 'END{print $6}'`
    /bin/echo ${DRIVE}
    }

# progressively delete oldest backup sets in chronological order 
# until there is at least ${MIN_FREE} bytes of free space
#    parameter 1: the backup directory path
#    parameter 2: the minimum amount of free space required
#    parameter 3: the drive (mount point) on which to check free space
function cleanup() {
    BACKUP_DIR=${1}
    MIN_FREE=${2}
    DRIVE=${3}

    # build a list of backups in oldest -> newest order
    BACKUPS=(`/bin/ls -1tr ${BACKUP_DIR}`)

    for i in ${BACKUPS}; do
	size=`/usr/bin/du ${BACKUP_DIR}/$i* |  /usr/bin/awk '{ sum += $0 } END { print sum }'`
	sizeh=`/usr/bin/du -h ${BACKUP_DIR}/$i* |  /usr/bin/awk '{ sum += $0 } END { print sum }'`
	/bin/echo "deleting ${BACKUP_DIR}/${i}* (${sizeh}M)"
        /bin/rm -rfv ${BACKUP_DIR}/${i}
        DRIVE_FREE_BLOCKS=`/bin/df -k | /bin/grep ${DRIVE} | awk '{print $4}'`
        if [[ ( ${DRIVE_FREE_BLOCKS} -ge ${MIN_FREE} ) ]]
	then
	    break
	fi
    done
    drive_freeh=`/bin/df -h | /bin/grep ${DRIVE} | awk '{print $4}'`
    /bin/echo "Now has ${drive_freeh} free space"
}

# return 1 if there is sufficient free space or 0 if there is not
# TODO externalize MIN_FREE_PERCENT
#    parameter 1: the drive (mount point) on which to check free space
function have_sufficient_free_space() {
    DRIVE=${1}
    MIN_FREE_BLOCKS=${2}
    DRIVE_FREE_BLOCKS=`/bin/df -k ${DRIVE} | /bin/grep ${DRIVE} | awk '{print $4}'`    
    if [[ ( ${DRIVE_FREE_BLOCKS} -ge ${MIN_FREE_BLOCKS} ) ]]
    then
        /bin/echo 1
    else
        /bin/echo 0
    fi
}


# help message
# (no parameters)
function usage() {
    /bin/echo "Usage:\n"
    /bin/echo "\tbackmeup "
    /bin/echo "\t\t-f {configuration file} "
    /bin/echo "\t\t-d {backup directory} "
    /bin/echo "\t\t-t {backup type} \n"
    /bin/echo "arguments:\n"
    /bin/echo "\t{backup type} is full | diff"
    /bin/echo "\t\tfull does a full backup of everything specified in the configuration file"
    /bin/echo "\t\tdiff does an incremental backup of everything specified in the configuration file based on the changes made since the last backup\n"
    /bin/echo "\n\nexample:\n\tbackmeup -f ~/.backmeup.cfg -d /media/jdonald/BACKUP4T/backup/armenelos -t diff"
}

# ---------------------------------------------------------

MACHINE=`uname -n`
BACKUP_NAME="${MACHINE}"
MAX_SIZE="512M"


if (( $# != 6 ))
then
    /bin/echo "wrong number of arguments passed"
    usage
    exit 1
fi

# : indicates the preceding letter option requires a parameter
while getopts "f:d:t:h" opt; 
do
    case ${opt} in
	f )
	    CFG_FILE=${OPTARG}
	    /bin/echo "CFG_FILE=$CFG_FILE"
	    ;;
	: ) /bin/echo "$0: Must supply an argument to -${OPTARG}"
         exit 1
         ;;
	d )
            PARENT_BACKUP_DIR=${OPTARG}
            ;;
	: ) /bin/echo "$0: Must supply an argument to -${OPTARG}"
         exit 1
          ;;
	t )
	    TYPE=${OPTARG}
	    /bin/echo "TYPE=$TYPE"
	    ;;
	: ) /bin/echo "$0: Must supply an argument to -${OPTARG}"
         exit 1
          ;;
	h )
	    usage
	    ;;
        * ) /bin/echo "Invalid option -${OPTARG} ignored"
	     usage
	     exit 1
	 ;;
	\? ) /bin/echo "Invalid option -${OPTARG} ignored"
	     usage
	     exit 1
	 ;;
    esac
done


DRIVE=`get_mount_point ${PARENT_BACKUP_DIR}`

DRIVE_TOTAL_BLOCKS=`/bin/df -k ${DRIVE} | /bin/grep ${DRIVE} | awk '{print $2}'`

MIN_FREE_PERCENT=.25
MIN_FREE_BLOCKS=$(($DRIVE_TOTAL_BLOCKS * $MIN_FREE_PERCENT))
MIN_FREE_BLOCKS=${MIN_FREE_BLOCKS:0:-1} #strip the trailing decimal point

if [[ -d "${PARENT_BACKUP_DIR}" ]]
then
    /bin/echo ""
else
    /bin/echo "${PARENT_BACKUP_DIR} is not a directory" >&2
    exit 1
fi

if [[ ${PARENT_BACKUP_DIR} == "" ]]
then
    /bin/mkdir -p ${PARENT_BACKUP_DIR}
fi

freeness=`have_sufficient_free_space ${DRIVE} ${MIN_FREE_BLOCKS}`

if [[ ${freeness} -eq 1 ]]
then
    /bin/echo "plenty of free space on ${DRIVE}"
else
    /bin/echo "not enough free space on ${DRIVE}"
    cleanup ${PARENT_BACKUP_DIR} ${MIN_FREE_BLOCKS} ${DRIVE}
fi

DATESTAMP=`date +%Y%m%d-%H%M`

if [[ ( $TYPE != "full" ) && ( $TYPE != "FULL" ) ]] 
then
    incr_backup ${PARENT_BACKUP_DIR} ${MACHINE} ${DATESTAMP}
else
    full_backup ${PARENT_BACKUP_DIR} ${MACHINE} ${DATESTAMP}
fi
